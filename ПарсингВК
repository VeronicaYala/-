def get_offset(group_id):
import requests
import time

group_list =  ['datacampus', '185023286', 'data_mining_in_action', '223456', '187222444', 'nta_ds_ai', 'business__intelligence', 'club1981711', 'datascience', 'ozonmasters', 'businessanalysts', 'datamining.team', 'club.shad', '174278716', 'sqlex', 'sql_helper', 'odssib', 'sapbi', 'sql_learn', 'hsespbcareer', 'smartdata', 'pomoshch_s_spss', 'dwhexpert', 'k0d_ds', 'sql_ex_ru', 'datascience_ai', 'data_club', 'mashinnoe_obuchenie_ai_big_data', 'womeninbigdata', 'introstats', 'smartdata', 'data_mining_in_action', 'dlschool_mipt']

token = 'ваш_токен'
    count = requests.get('https://api.vk.com/method/groups.getMembers', params={
            'access_token':token,
            'v':5.103,
            'group_id': group_id,
            'sort':'id_desc',
            'offset':0,
            'fields':'last_seen'
        }).json()['response']['count']
    return count // 1000
   def get_offset(group_id):
    count = requests.get('https://api.vk.com/method/groups.getMembers', params={
            'access_token':token,
            'v':5.103,
            'group_id': group_id,
            'sort':'id_desc',
            'offset':0,
            'fields':'last_seen'
        }).json()['response']['count']
    return count // 1000 
def get_users(group_id):
    good_id_list = []
    offset = 0
    max_offset = get_offset(group_id)
    while offset < max_offset:
        response = requests.get('https://api.vk.com/method/groups.getMembers', params={
            'access_token':token,
            'v':5.103,
            'group_id': group_id,
            'sort':'id_desc',
            'offset':offset,
            'fields':'last_seen'
        }).json()['response']
        offset += 1
        for item in response['items']:
            try:
                if item['last_seen']['time'] >= 1605571200:
                    good_id_list.append(item['id'])
            except Exception as E:
                continue
    return good_id_list
    all_users = []

for group in group_list:
    print(group)
    try:
        users = get_users(group)
        all_users.extend(users)
        time.sleep(1)
    except KeyError as E:
        print(group, E)
        continue

all_users = list(set(all_users))
with open('users.txt', 'w') as f:
    for item in all_users:
        f.write("%s\n" % item)
import vk_api
import configparser
def captcha_handler(captcha):
    key = input("Enter Captcha {0}: ".format(captcha.get_url())).strip()
    return captcha.try_again(key)

def parse_ids(group_id, tools):
    ids = tools.get_all('groups.getMembers', 1000, {'group_id': group_id})
    ids = ids['items']
    return ids
def read_groups():
    group_list = []
    f=open('groups.txt', 'r')
    for line in f:
        group_list.append(line.strip())
    f.close
    return group_list
def write_ids(data):
    with open('result.txt', 'w') as f:
        for line in data:
            f.write(str(line) + '\n')
def main():
    parsed = []
    filtered = []
    #Берем список груп из файла
    group_list = read_groups()
    # Загружаем конфиг
    conf = configparser.RawConfigParser()
    conf.read('config.cfg')
    login = conf.get('account', 'login')
    password = conf.get('account', 'password')
    print('Loggin into ' + login)
    vk_session = vk_api.VkApi(login, password, captcha_handler=captcha_handler)
    try:
        vk_session.authorization()
    except vk_api.AuthorizationError as error_msg:
        print(error_msg)
        return
    tools = vk_api.VkTools(vk_session)
    #Поочередно собираем все ид с каждой группы
    for group in group_list:
        print('Parsing ' + group)
        parsed = parsed + parse_ids(group, tools)
    #Удаляем дубликаты
    for user in parsed:
        if user not in filtered:
            filtered.append(user)
    #Результат пишем в result.txt и идем пить кофе
    write_ids(filtered)
    print('Done!')
    input('Press Enter...')
if __name__ == '__main__':
        main()
       
import vk  # Импортируем модуль vk
def get_members(groupid):  # Функция формирования базы участников сообщества в виде списка
  pass
def save_data(data, filename="data.txt"):  # Функция сохранения базы в txt файле
  pass
def enter_data(filename="data.txt"):  # Функция ввода базы из txt файла
  pass
def get_intersection(group1, group2):  # Функция нахождения пересечений двух баз
  pass
def union_members(group1, group2):  # Функция объединения двух баз без повторов
  pass
if __name__ == "__main__": 
    token = ""  # Сервисный ключ доступа
    session = vk.Session(access_token=token)  # Авторизация
    vk_api = vk.API(session)
    def get_members(groupid):
    first = vk_api.groups.getMembers(group_id=groupid, v=5.92)  # Первое выполнение метода
    data = first["items"]  # Присваиваем переменной первую тысячу id'шников
    count = first["count"] // 1000  # Присваиваем переменной количество тысяч участников
    # С каждым проходом цикла смещение offset увеличивается на тысячу
    # и еще тысяча id'шников добавляется к нашему списку.
    for i in range(1, count+1):  
        data = data + vk_api.groups.getMembers(group_id=groupid, v=5.92, offset=i*1000)["items"]
    return data
    def save_data(data, filename="data.txt"):  # Функция сохранения базы в txt файле
    with open(filename, "w") as file:  # Открываем файл на запись
        # Записываем каждый id'шник в новой строке,
        # добавляя в начало "vk.com/id", а в конец перенос строки.
        for item in data:   
            file.write("vk.com/id" + str(item) + "\n") 


def enter_data(filename="data.txt"):  # Функция ввода базы из txt файла
    with open(filename) as file:  # Открываем файл на чтение
        b = [] 
        # Записываем каждую строчку файла в список,
        # убирая "vk.com/id" и "\n" с помощью среза.
        for line in file:   
            b.append(line[9:len(line) - 1])  
    return b
   def get_intersection(group1, group2):
    group1 = set(group1)  
    group2 = set(group2)  
    intersection = group1.intersection(group2)  # Находим пересечение двух множеств
    all_members = len(group1) + len(group2) - len(intersection)  
    result = len(intersection)/all_members * 100  # Высчитываем пересечение в процентах
    print("Пересечение аудиторий: ", round(result,2), "%", sep="") 
    return list(intersection)


def union_members(group1, group2):
    group1 = set(group1)  
    group2 = set(group2)  
    union = group1.union(group2)  # Объединяем два множества
    return list(union) 
    if __name__ == "__main__":
    token = ""
    session = vk.Session(access_token=token)
    vk_api = vk.API(session)
    bobfilm = get_members("bobfilm")
    hdkinomania = get_members("hdkinomania")
    get_intersection(bobfilm, hdkinomania)
    union = union_members(bobfilm, hdkinomania)
    save_data(union)
